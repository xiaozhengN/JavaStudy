@[TOC](Spring Boot项目启动过程解析)

# 前置知识

今天看到一个博客, 介绍Spring Boot的启动原理, 最近也在想着换工作. 复习一下. 说实话, 不去准备很难把这些面试题回答的清楚.
我面试的一些人, 其实也基本没有说清楚. 最多知识知道一个大概的步骤.
回答的其实是没有条理的. 我听得也难受. 如果面试人回答的不好, 最好可以帮面试人补充一下. 完善一下候选人的知识体系.
这个一个合格的面试官该做的. 不要一味的去问问题, 像背书一样, 没有意义.

# 引语

在`Java`后端开发领域，大名鼎鼎的`Spring Boot`框架想必大家都用过。

用过`Spring Boot`的应该都知道，在项目启动入口的主类`main()`方法里，一句简简单单的

```
SpringApplication.run( ... );
```

便开启了项目的启动运行之路。

![图片](../06-文件持久化/01-TyporaPic/640-16916801702301.png)

那么本文我们就来看看这个 **SpringApplication** 以及 **run()** 方法 到底是个什么鬼，它背后又隐藏了哪些奥秘呢？

# 启动类

`SpringApplication` 这个类应该算是 Spring Boot 框架 本身的“创新”产物了，因为原始的Spring框架中并没有这个类，`SpringApplication` 里面封装了一套Spring应用的启动流程，
然而这对用户完全透明，因此我们上手 Spring Boot 时感觉简洁且轻量。

一般来说默认的 `SpringApplication` 执行流程已经可以满足大部分需求，但是 若用户想干预这个过程，则可以通过 `SpringApplication` 在流程某些地方开启的 **扩展点** 来完成对流程的扩展，典型的扩展方案那就是使用 `set` 方法。

我们来举一个栗子，把我们天天司空见惯的 Spring Boot 应用的启动类来拆解一下写出来：

```
@SpringBootApplication
public class CodeSheepApplication {
 public static void main( String[] args ) {
  // SpringApplication.run( CodeSheepApplication.class args ); // 这是传统Spring Boot应用的启动，一行代码搞定，内部默认做了很多事
  SpringApplication app = new SpringApplication( CodeSheepApplication.class );
  app.setXXX( ... ); // 用户自定的扩展在此 ！！！
  app.run( args );
 }
}
```

这样一拆解后我们发现，我们也需要先构造 `SpringApplication` 类对象，然后调用该对象的 `run()` 方法。

那么接下来就聊聊 `SpringApplication` 的构造过程 以及其 `run()`方法的流程，搞清楚了这个，那么也就搞清楚了`Spring Boot`应用是如何运行起来的了。

# SpringApplication实例的初始化

还是先对照代码来看：

![图片](../06-文件持久化/01-TyporaPic/640-16916801702312.png)

四个关键的步骤已标注在图中，分别解释如下：

- **①** 推断应用的类型：创建的是REACTIVE应用、SERVLET应用、NONE 三种中的某一种

![图片](../06-文件持久化/01-TyporaPic/640-16916801702313.png)

- **②** 使用`SpringFactoriesLoader`查找并加载`classpath下META-INF/spring.factories`文件中所有可用的 `ApplicationContextInitializer`

![图片](../06-文件持久化/01-TyporaPic/640-16916801702314.png)

- **③** 使用`SpringFactoriesLoader`查找并加载`classpath下META-INF/spring.factories`文件中的所有可用的 `ApplicationListener`

![图片](../06-文件持久化/01-TyporaPic/640-16916801702315.png)

- **④** 推断并设置`main`方法的定义类

![图片](../06-文件持久化/01-TyporaPic/640-16916801702316.png)

------

# SpringApplication的run()方法探秘

先看看代码长啥样子：

![图片](../06-文件持久化/01-TyporaPic/640-16916801702317.png)

关键步骤都已经用数字标注在上图之中了，除此之外，这里也画了一个流程图对照理解：

![图片](../06-文件持久化/01-TyporaPic/640-16916801702318.png)

我们将各步骤总结精炼如下：

1. 通过 `SpringFactoriesLoader` 加载 `META-INF/spring.factories` 文件，获取并创建 `SpringApplicationRunListener` 对象
2. 然后由 `SpringApplicationRunListener` 来发出 `starting` 消息
3. 创建参数，并配置当前 `SpringBoot` 应用将要使用的 `Environment`
4. 完成之后，依然由 `SpringApplicationRunListener` 来发出 `environmentPrepared` 消息
5. 创建 `ApplicationContext`
6. 初始化 `ApplicationContext`，并设置 `Environment`，加载相关配置等
7. 由 `SpringApplicationRunListener` 来发出 `contextPrepared` 消息，告知Spring Boot 应用使用的 `ApplicationContext` 已准备OK
8. 将各种 `beans` 装载入 `ApplicationContext`，继续由 `SpringApplicationRunListener` 来发出 `contextLoaded` 消息，告知 Spring Boot 应用使用的 `ApplicationContext` 已装填OK
9. `refresh ApplicationContext`，完成IoC容器可用的最后一步
10. 由 `SpringApplicationRunListener` 来发出 `started` 消息
11. 调用`callRunners(...)`方法，让实现了`ApplicationRunner`和`CommandLineRunner`接口类的`run` 方法得以执行，用于在 Spring 应用上下文准备完毕后，执行一些额外操作。从而完成最终的程序的启动。
12. 由 `SpringApplicationRunListener` 来发出 `running` 消息，告知程序已运行起来了

至此，全流程结束。

